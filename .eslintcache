[{"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/index.js":"1","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/App.js":"2","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/Router.js":"3","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/FoodList.js":"4","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/FoodForm.js":"5","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/Ingredients.js":"6"},{"size":159,"mtime":1610772516976,"results":"7","hashOfConfig":"8"},{"size":761,"mtime":1610859944085,"results":"9","hashOfConfig":"8"},{"size":383,"mtime":1610849617592,"results":"10","hashOfConfig":"8"},{"size":10512,"mtime":1610914635878,"results":"11","hashOfConfig":"8"},{"size":8866,"mtime":1610871514860,"results":"12","hashOfConfig":"8"},{"size":9387,"mtime":1610916881110,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"17756qo",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/index.js",[],["28","29"],"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/App.js",[],"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/Router.js",[],"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/FoodList.js",["30","31","32","33","34","35","36"],"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/FoodForm.js",["37"],"import { Formik, Field, Form } from \"formik\";\n\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nconst Button = styled.button`\n  position: \"absolute\";\n  margin-left: 430px;\n  margin-top: 40px;\n`;\nconst IngredientButton = styled.button`\n  position: \"absolute\";\n  margin-left: 400px;\n`;\nconst InstructionButton = styled.button`\n  position: \"absolute\";\n  margin-left: 400px;\n`;\n\nconst HrTagContainer = styled.div`\n  margin-top: 20px;\n`;\n\nfunction FoodForm() {\n  const [ingredients, setIngredients] = useState([]);\n  const [directions, setDriections] = useState([]);\n  const history = useHistory();\n  function addFoodItem(data) {\n    let arr = data;\n    arr.ingredients = ingredients;\n    arr.directions = directions;\n    axios\n      .post(`http://localhost:3001/recipes`, arr)\n      .then((res) => {\n        history.push(\"/\");\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  }\n  function addIngredient(data) {\n    let arr = ingredients;\n    data.uuid = uuidv4();\n    arr.push(data);\n    setIngredients(() => [...arr]);\n    console.log(ingredients);\n  }\n  function addDirection(data) {\n    let arr = directions;\n    if (data.option === \"true\") {\n      data.option = \"Yes\";\n    }\n    if (data.option === \"false\") {\n      data.option = \"No\";\n    }\n    arr.push(data);\n    setDriections(() => [...arr]);\n  }\n  return (\n    <div>\n      <div>\n        <Formik\n          enableReinitialize\n          initialValues={{}}\n          onSubmit={addFoodItem}\n          render={(formikProps) => (\n            <Form id=\"foodForm\">\n              <div style={{ float: \"left\" }}>\n                <label className=\"form-label\">Name</label>\n                <Field\n                  name=\"title\"\n                  type=\"text\"\n                  className=\"text-input\"\n                  placeholder=\"Enter a name\"\n                  style={{ position: \"absolute\" }}\n                />\n                <br />\n              </div>\n              <div\n                style={{ position: \"absolute\", marginLeft: 270, marginTop: -2 }}\n              >\n                <label className=\"form-label\">Description</label>\n                <Field\n                  name=\"description\"\n                  type=\"text\"\n                  placeholder=\"Enter a description\"\n                  className=\"text-input\"\n                />\n              </div>\n              <br />\n              <div>\n                <div\n                  className=\"servings\"\n                  style={{ position: \"absolute\", marginTop: 19 }}\n                >\n                  <label className=\"form-label\">Servings</label>\n\n                  <Field name=\"servings\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <br />\n                <div\n                  style={{\n                    position: \"absolute\",\n\n                    marginLeft: 270,\n                  }}\n                >\n                  <label className=\"form-label\">Prep Time (in mins)</label>\n                  <Field name=\"prepTime\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <br />\n                <div style={{ marginTop: 15 }}>\n                  <label className=\"form-label\">Cook time (in mins)</label>\n                  <Field name=\"cookTime\" type=\"number\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n              </div>\n            </Form>\n          )}\n        />\n      </div>\n      <HrTagContainer>\n        <hr />\n      </HrTagContainer>\n      <div className=\"ingredient-form\">\n        <h4>Ingredients</h4>\n        <Formik\n          enableReinitialize\n          initialValues={{}}\n          onSubmit={addIngredient}\n          render={(formikProps) => (\n            <Form>\n              <div style={{ position: \"absolute\", float: \"left\" }}>\n                <label className=\"form-label\">Amount</label>\n                <Field\n                  name=\"amount\"\n                  type=\"number\"\n                  step={0.1}\n                  placeholder=\"How much?\"\n                  className=\"text-input\"\n                />\n              </div>\n              <div style={{ marginLeft: 250 }}>\n                <label className=\"form-label\">Measurement</label>\n                <Field name=\"measurement\" className=\"text-input-ingredients\">\n                  {({ field, form, meta }) => (\n                    <span>\n                      <input\n                        placeholder=\"Ex. teaspoon\"\n                        {...field}\n                        type=\"text\"\n                        className=\"text-input\"\n                      />\n                    </span>\n                  )}\n                </Field>\n              </div>\n              <div style={{ postion: \"absolute\", marginTop: 15 }}>\n                <label className=\"form-label\">Name</label>\n                <Field name=\"name\" type=\"text\" className=\"text-input\">\n                  {({ field, form, meta }) => (\n                    <span>\n                      <input\n                        {...field}\n                        placeholder=\"Enter ingredient name\"\n                        type=\"text\"\n                        className=\"text-input\"\n                      />\n                    </span>\n                  )}\n                </Field>\n              </div>\n              <IngredientButton className=\"btn btn-secondary \" type=\"submit\">\n                Submit Ingredient\n              </IngredientButton>\n            </Form>\n          )}\n        />\n        <ul>\n          {ingredients.map((item, index) => (\n            <li key={index}>\n              <span style={{ fontWeight: \"bold\" }}>Name:</span> {item.name}{\" \"}\n              <span style={{ fontWeight: \"bold\" }}>Measurement:</span>{\" \"}\n              {item.measurement}{\" \"}\n              <span style={{ fontWeight: \"bold\" }}>Amount:</span> {item.amount}{\" \"}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <HrTagContainer>\n        <hr />\n      </HrTagContainer>\n\n      <div className=\"directions-form\">\n        <h4>Directions</h4>\n        <Formik\n          enableReinitialize\n          initialValues={{}}\n          onSubmit={addDirection}\n          render={(formikProps) => (\n            <Form>\n              <div>\n                <label style={{ bottom: 5 }} className=\"form-label\">\n                  Instruction\n                </label>\n                <Field\n                  name=\"instruction\"\n                  type=\"text\"\n                  rows=\"3\"\n                  maxLength=\"1000\"\n                  placeholder=\"Enter an instruction\"\n                  component=\"textarea\"\n                  className=\"textarea\"\n                />\n              </div>\n              <div style={{ marginTop: 15 }}>\n                <label className=\"form-label\">Optional</label>\n                <Field name=\"option\" component=\"select\">\n                  <option value=\"\">---Select if it is Optional ---</option>\n                  <option value=\"true\">Yes</option>\n                  <option value=\"false\">No</option>\n                </Field>\n              </div>\n\n              <InstructionButton className=\"btn btn-secondary\" type=\"submit\">\n                Add Instruction\n              </InstructionButton>\n            </Form>\n          )}\n        />\n        <ul>\n          {directions.map((item, index) => (\n            <li>\n              <span style={{ fontWeight: \"bold\" }}>Instruction</span>{\" \"}\n              {item.instruction}{\" \"}\n              <span style={{ fontWeight: \"bold\" }}>Optional</span> {item.option}{\" \"}\n            </li>\n          ))}\n        </ul>\n        <HrTagContainer>\n          <hr />\n        </HrTagContainer>\n      </div>\n      <Button className=\"btn btn-primary\" form=\"foodForm\" type=\"submit\">\n        Add Food{\" \"}\n      </Button>\n    </div>\n  );\n}\n\nexport default FoodForm;\n","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/Ingredients.js",["38","39"],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":23,"column":10,"nodeType":"46","messageId":"47","endLine":23,"endColumn":21},{"ruleId":"44","severity":1,"message":"48","line":23,"column":23,"nodeType":"46","messageId":"47","endLine":23,"endColumn":37},{"ruleId":"44","severity":1,"message":"49","line":26,"column":10,"nodeType":"46","messageId":"47","endLine":26,"endColumn":18},{"ruleId":"44","severity":1,"message":"50","line":26,"column":20,"nodeType":"46","messageId":"47","endLine":26,"endColumn":31},{"ruleId":"44","severity":1,"message":"51","line":60,"column":12,"nodeType":"46","messageId":"47","endLine":60,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":245,"column":26,"nodeType":"54","messageId":"55","endLine":245,"endColumn":28},{"ruleId":"56","severity":1,"message":"57","line":254,"column":15,"nodeType":"58","endLine":260,"endColumn":17},{"ruleId":"44","severity":1,"message":"59","line":3,"column":27,"nodeType":"46","messageId":"47","endLine":3,"endColumn":36},{"ruleId":"44","severity":1,"message":"60","line":19,"column":9,"nodeType":"46","messageId":"47","endLine":19,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":38,"column":6,"nodeType":"63","endLine":38,"endColumn":8,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'allSpecials' is assigned a value but never used.","Identifier","unusedVar","'setAllSpecials' is assigned a value but never used.","'formList' is assigned a value but never used.","'setFormList' is assigned a value but never used.","'editItem' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state.foodItem'. Either include it or remove the dependency array. If 'setFoodItem' needs the current value of 'props.location.state.foodItem', you can also switch to useReducer instead of useState and read 'props.location.state.foodItem' in the reducer.","ArrayExpression",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},"Update the dependencies array to be: [props.location.state.foodItem]",{"range":"70","text":"71"},[1237,1239],"[props.location.state.foodItem]"]