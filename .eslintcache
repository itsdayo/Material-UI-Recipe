[{"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/index.js":"1","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/App.js":"2","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/Router.js":"3","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/FoodList.js":"4","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/FoodForm.js":"5","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/Ingredients.js":"6"},{"size":159,"mtime":1610772516976,"results":"7","hashOfConfig":"8"},{"size":761,"mtime":1610859944085,"results":"9","hashOfConfig":"8"},{"size":383,"mtime":1610849617592,"results":"10","hashOfConfig":"8"},{"size":10512,"mtime":1610914635878,"results":"11","hashOfConfig":"8"},{"size":8866,"mtime":1610871514860,"results":"12","hashOfConfig":"8"},{"size":9387,"mtime":1610916881110,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"17756qo",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/index.js",[],["30","31"],"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/App.js",[],"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/Router.js",[],"/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/FoodList.js",["32","33","34","35","36","37","38"],"import \"./../style.css\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport Modal from \"react-modal\";\nimport styled from \"styled-components\";\nimport { Formik, Field, Form } from \"formik\";\n\nconst CloseModalButton = styled.button`\n  position: \"absolute\";\n  left: 4px;\n  top: 4px;\n`;\nconst SubmitEditButton = styled.button`\n  position: \"absolute\";\n  margin-left: 250px;\n\n  background-color: gold;\n`;\nfunction FoodList(props) {\n  const history = useHistory();\n  const [allData, setAllData] = useState([]);\n  const [allSpecials, setAllSpecials] = useState([]);\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [foodItem, setFoodItem] = useState({});\n  const [formList, setFormList] = useState([]);\n\n  useEffect(() => {\n    // retrieving data from the recipe  api\n    axios\n      .get(\"http://localhost:3001/recipes\")\n      .then((res) => {\n        setAllData(res.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  }, []);\n\n  function openModal(foodItem) {\n    setIsOpen(true);\n    setFoodItem(foodItem);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  };\n  function editItem() {\n    history.push(\"/ingredients\");\n  }\n  function viewDescription() {}\n  function viewIngredients(foodItem) {\n    history.push({\n      pathname: \"/ingredients\",\n      state: { foodItem: foodItem },\n    });\n  }\n  function addIngredient() {}\n  return (\n    <div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        style={customStyles}\n        ariaHideApp={false}\n      >\n        <CloseModalButton className=\"btn btn-secondary\" onClick={closeModal}>\n          X\n        </CloseModalButton>\n\n        <h2>Edit the food item</h2>\n\n        <Formik\n          enableReinitialize\n          initialValues={{\n            title: foodItem.title,\n            description: foodItem.description,\n            servings: foodItem.servings,\n            prepTime: foodItem.prepTime,\n            cookTime: foodItem.cookTime,\n          }}\n          // onSubmit={addDirection}\n          render={(formikProps) => (\n            <Form>\n              <div style={{ float: \"left\" }}>\n                <label className=\"form-label\">Name</label>\n                <Field\n                  name=\"title\"\n                  type=\"text\"\n                  className=\"text-input\"\n                  placeholder=\"Enter a name\"\n                  style={{ position: \"absolute\" }}\n                />\n                <br />\n              </div>\n              <div\n                style={{ position: \"absolute\", marginLeft: 270, marginTop: -2 }}\n              >\n                <label className=\"form-label\">Description</label>\n                <Field\n                  name=\"description\"\n                  type=\"text\"\n                  placeholder=\"Enter a description\"\n                  className=\"text-input\"\n                />\n              </div>\n              <br />\n              <div>\n                <div\n                  className=\"servings\"\n                  style={{ position: \"absolute\", marginTop: 19 }}\n                >\n                  <label className=\"form-label\">Servings</label>\n\n                  <Field name=\"servings\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <br />\n                <div\n                  style={{\n                    position: \"absolute\",\n                    float: \"right\",\n                    marginLeft: 160,\n                  }}\n                >\n                  <label className=\"form-label\">Prep Time (in mins)</label>\n                  <Field name=\"prepTime\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <div\n                  style={{\n                    marginLeft: 370,\n                    marginTop: -1,\n                  }}\n                >\n                  <label className=\"form-label\">Cook time (in mins)</label>\n                  <Field name=\"cookTime\" type=\"number\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n              </div>\n\n              <SubmitEditButton type=\"submit\">Add Instruction</SubmitEditButton>\n            </Form>\n          )}\n        />\n        <div>\n          <h4>Ingredients</h4>\n          <Formik\n            enableReinitialize\n            initialValues={{}}\n            onSubmit={addIngredient}\n            render={(formikProps) => (\n              <Form>\n                <div style={{ position: \"absolute\", float: \"left\" }}>\n                  <label className=\"form-label\">Amount</label>\n                  <Field\n                    name=\"amount\"\n                    type=\"text\"\n                    placeholder=\"How much? Ex. 1 cup\"\n                    className=\"text-input\"\n                  />\n                </div>\n                <div style={{ marginLeft: 250 }}>\n                  <label className=\"form-label\">Measurement</label>\n                  <Field name=\"measurement\" className=\"text-input-ingredients\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          placeholder=\"Ex. teaspoon\"\n                          {...field}\n                          type=\"text\"\n                          className=\"text-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <div style={{ postion: \"absolute\", marginTop: 15 }}>\n                  <label className=\"form-label\">Name</label>\n                  <Field name=\"name\" type=\"text\" className=\"text-input\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          placeholder=\"Enter ingredient name\"\n                          type=\"text\"\n                          className=\"text-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <button type=\"submit\">Add Ingredient</button>\n              </Form>\n            )}\n          />\n\n          {/* {formList.map(function (input, index) {\n            return { input };\n          })} */}\n        </div>\n      </Modal>\n      {allData.map((item, index) => (\n        <div key={index} className=\"food-card\">\n          <div className=\"food-card-content\">\n            {item.images != undefined ? (\n              <img\n                className=\"food-list-image\"\n                src={item.images.small}\n                alt=\"Sorry something went wrong\"\n                height={100}\n                width={150}\n              />\n            ) : (\n              <img\n                className=\"food-list-image\"\n                src=\"https://images.squarespace-cdn.com/content/v1/55ece940e4b048d1ed401c11/1450136257542-4DATU4KRB70MDENGJXJX/ke17ZwdGBToddI8pDm48kAf-OpKpNsh_OjjU8JOdDKBZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZUJFbgE-7XRK3dMEBRBhUpwkCFOLgzJj4yIx-vIIEbyWWRd0QUGL6lY_wBICnBy59Ye9GKQq6_hlXZJyaybXpCc/X%3A++The+Unknown\"\n                // alt=\"Sorry something went wrong\"\n                height={100}\n                width={150}\n              />\n            )}\n            <div className=\"food-list-description\">\n              <div className=\"food-card-text\">\n                <span style={{ fontWeight: \"bold\" }}>Name:</span> {item.title}{\" \"}\n              </div>\n              <div className=\"food-card-text\">\n                <span style={{ fontWeight: \"bold\" }}>Description:</span>{\" \"}\n                {item.description}\n              </div>\n              <div className=\"food-card-text\">\n                <span style={{ fontWeight: \"bold\" }}>Serving:</span>{\" \"}\n                {item.servings}\n                <span style={{ fontWeight: \"bold\", marginLeft: 5 }}>\n                  Prep Time:\n                </span>\n                <span style={{ marginLeft: 2 }}> {item.prepTime} </span>\n                <span style={{ fontWeight: \"bold\", marginLeft: 5 }}>\n                  Cook time:\n                </span>{\" \"}\n                {item.cookTime}\n              </div>\n              <div className=\"food-card-text\">\n                <span style={{ fontWeight: \"bold\" }}>Posted on:</span>{\" \"}\n                {item.postDate}\n              </div>\n              <div className=\"food-card-text\">\n                <span style={{ fontWeight: \"bold\" }}>Edited on:</span>\n                <span style={{ marginLeft: 3 }}>{item.editDate}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"food-card-buttons\">\n            <button\n              style={{}}\n              className=\"btn btn-success\"\n              onClick={() => openModal(item)}\n            >\n              Edit{\" \"}\n            </button>\n            <button\n              style={{ marginLeft: 10 }}\n              className=\" btn btn-warning\"\n              onClick={viewDescription}\n            >\n              View Directions\n            </button>\n            <button\n              style={{ marginLeft: 10, position: \"absolute\", float: \"left\" }}\n              className=\"btn btn-dark\"\n              onClick={() => viewIngredients(item)}\n            >\n              {\" \"}\n              View Ingredients\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default FoodList;\n","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/FoodForm.js",["39"],"import { Formik, Field, Form } from \"formik\";\n\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nconst Button = styled.button`\n  position: \"absolute\";\n  margin-left: 430px;\n  margin-top: 40px;\n`;\nconst IngredientButton = styled.button`\n  position: \"absolute\";\n  margin-left: 400px;\n`;\nconst InstructionButton = styled.button`\n  position: \"absolute\";\n  margin-left: 400px;\n`;\n\nconst HrTagContainer = styled.div`\n  margin-top: 20px;\n`;\n\nfunction FoodForm() {\n  const [ingredients, setIngredients] = useState([]);\n  const [directions, setDriections] = useState([]);\n  const history = useHistory();\n  function addFoodItem(data) {\n    let arr = data;\n    arr.ingredients = ingredients;\n    arr.directions = directions;\n    axios\n      .post(`http://localhost:3001/recipes`, arr)\n      .then((res) => {\n        history.push(\"/\");\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  }\n  function addIngredient(data) {\n    let arr = ingredients;\n    data.uuid = uuidv4();\n    arr.push(data);\n    setIngredients(() => [...arr]);\n    console.log(ingredients);\n  }\n  function addDirection(data) {\n    let arr = directions;\n    if (data.option === \"true\") {\n      data.option = \"Yes\";\n    }\n    if (data.option === \"false\") {\n      data.option = \"No\";\n    }\n    arr.push(data);\n    setDriections(() => [...arr]);\n  }\n  return (\n    <div>\n      <div>\n        <Formik\n          enableReinitialize\n          initialValues={{}}\n          onSubmit={addFoodItem}\n          render={(formikProps) => (\n            <Form id=\"foodForm\">\n              <div style={{ float: \"left\" }}>\n                <label className=\"form-label\">Name</label>\n                <Field\n                  name=\"title\"\n                  type=\"text\"\n                  className=\"text-input\"\n                  placeholder=\"Enter a name\"\n                  style={{ position: \"absolute\" }}\n                />\n                <br />\n              </div>\n              <div\n                style={{ position: \"absolute\", marginLeft: 270, marginTop: -2 }}\n              >\n                <label className=\"form-label\">Description</label>\n                <Field\n                  name=\"description\"\n                  type=\"text\"\n                  placeholder=\"Enter a description\"\n                  className=\"text-input\"\n                />\n              </div>\n              <br />\n              <div>\n                <div\n                  className=\"servings\"\n                  style={{ position: \"absolute\", marginTop: 19 }}\n                >\n                  <label className=\"form-label\">Servings</label>\n\n                  <Field name=\"servings\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <br />\n                <div\n                  style={{\n                    position: \"absolute\",\n\n                    marginLeft: 270,\n                  }}\n                >\n                  <label className=\"form-label\">Prep Time (in mins)</label>\n                  <Field name=\"prepTime\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <br />\n                <div style={{ marginTop: 15 }}>\n                  <label className=\"form-label\">Cook time (in mins)</label>\n                  <Field name=\"cookTime\" type=\"number\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          type=\"number\"\n                          className=\"number-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n              </div>\n            </Form>\n          )}\n        />\n      </div>\n      <HrTagContainer>\n        <hr />\n      </HrTagContainer>\n      <div className=\"ingredient-form\">\n        <h4>Ingredients</h4>\n        <Formik\n          enableReinitialize\n          initialValues={{}}\n          onSubmit={addIngredient}\n          render={(formikProps) => (\n            <Form>\n              <div style={{ position: \"absolute\", float: \"left\" }}>\n                <label className=\"form-label\">Amount</label>\n                <Field\n                  name=\"amount\"\n                  type=\"number\"\n                  step={0.1}\n                  placeholder=\"How much?\"\n                  className=\"text-input\"\n                />\n              </div>\n              <div style={{ marginLeft: 250 }}>\n                <label className=\"form-label\">Measurement</label>\n                <Field name=\"measurement\" className=\"text-input-ingredients\">\n                  {({ field, form, meta }) => (\n                    <span>\n                      <input\n                        placeholder=\"Ex. teaspoon\"\n                        {...field}\n                        type=\"text\"\n                        className=\"text-input\"\n                      />\n                    </span>\n                  )}\n                </Field>\n              </div>\n              <div style={{ postion: \"absolute\", marginTop: 15 }}>\n                <label className=\"form-label\">Name</label>\n                <Field name=\"name\" type=\"text\" className=\"text-input\">\n                  {({ field, form, meta }) => (\n                    <span>\n                      <input\n                        {...field}\n                        placeholder=\"Enter ingredient name\"\n                        type=\"text\"\n                        className=\"text-input\"\n                      />\n                    </span>\n                  )}\n                </Field>\n              </div>\n              <IngredientButton className=\"btn btn-secondary \" type=\"submit\">\n                Submit Ingredient\n              </IngredientButton>\n            </Form>\n          )}\n        />\n        <ul>\n          {ingredients.map((item, index) => (\n            <li key={index}>\n              <span style={{ fontWeight: \"bold\" }}>Name:</span> {item.name}{\" \"}\n              <span style={{ fontWeight: \"bold\" }}>Measurement:</span>{\" \"}\n              {item.measurement}{\" \"}\n              <span style={{ fontWeight: \"bold\" }}>Amount:</span> {item.amount}{\" \"}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <HrTagContainer>\n        <hr />\n      </HrTagContainer>\n\n      <div className=\"directions-form\">\n        <h4>Directions</h4>\n        <Formik\n          enableReinitialize\n          initialValues={{}}\n          onSubmit={addDirection}\n          render={(formikProps) => (\n            <Form>\n              <div>\n                <label style={{ bottom: 5 }} className=\"form-label\">\n                  Instruction\n                </label>\n                <Field\n                  name=\"instruction\"\n                  type=\"text\"\n                  rows=\"3\"\n                  maxLength=\"1000\"\n                  placeholder=\"Enter an instruction\"\n                  component=\"textarea\"\n                  className=\"textarea\"\n                />\n              </div>\n              <div style={{ marginTop: 15 }}>\n                <label className=\"form-label\">Optional</label>\n                <Field name=\"option\" component=\"select\">\n                  <option value=\"\">---Select if it is Optional ---</option>\n                  <option value=\"true\">Yes</option>\n                  <option value=\"false\">No</option>\n                </Field>\n              </div>\n\n              <InstructionButton className=\"btn btn-secondary\" type=\"submit\">\n                Add Instruction\n              </InstructionButton>\n            </Form>\n          )}\n        />\n        <ul>\n          {directions.map((item, index) => (\n            <li>\n              <span style={{ fontWeight: \"bold\" }}>Instruction</span>{\" \"}\n              {item.instruction}{\" \"}\n              <span style={{ fontWeight: \"bold\" }}>Optional</span> {item.option}{\" \"}\n            </li>\n          ))}\n        </ul>\n        <HrTagContainer>\n          <hr />\n        </HrTagContainer>\n      </div>\n      <Button className=\"btn btn-primary\" form=\"foodForm\" type=\"submit\">\n        Add Food{\" \"}\n      </Button>\n    </div>\n  );\n}\n\nexport default FoodForm;\n","/Users/oladayoogundipe/Documents/frontend-api-skills-test/src/components/Ingredients.js",["40","41"],"import styled from \"styled-components\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./../style.css\";\nimport Modal from \"react-modal\";\nimport { Formik, Field, Form } from \"formik\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nconst CloseModalButton = styled.button`\n  position: \"absolute\";\n  left: 4px;\n  top: 4px;\n`;\nconst IngredientButton = styled.button`\n  position: \"absolute\";\n  margin-left: 400px;\n`;\nfunction Ingredients(props) {\n  const history = useHistory();\n  const [allData, setAllData] = useState([]);\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [allIngredients, setAllIngredients] = useState([]);\n  const [selectedIngredient, setSelectedIngredient] = useState({});\n  const [selectedFoodItem, setSelectedFoodItem] = useState({});\n  const [foodItem, setFoodItem] = useState({});\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:3001/recipes\")\n      .then((res) => {\n        setAllData(res.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n    setAllIngredients(props.location.state.foodItem.ingredients);\n    setFoodItem(props.location.state.foodItem);\n  }, []);\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n    },\n  };\n  function openModal(foodItem, ingredient) {\n    setIsOpen(true);\n    console.log(ingredient);\n    setSelectedIngredient(ingredient);\n    setSelectedFoodItem(foodItem);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n  function handleSubmit(item) {\n    item.uuid = uuidv4();\n\n    let foodItem = selectedFoodItem;\n    let ingredients = selectedFoodItem.ingredients;\n    console.log(ingredients);\n    for (let i = 0; i <= ingredients.length - 1; i++) {\n      if (ingredients[i].uuid === selectedIngredient.uuid) {\n        ingredients[i] = item;\n        break;\n      }\n    }\n    foodItem.ingredients = ingredients;\n    axios\n      .put(`http://localhost:3001/recipes/${foodItem.uuid}`, foodItem)\n      .then(() => closeModal());\n    setAllIngredients(() => [...foodItem.ingredients]);\n    setFoodItem(foodItem);\n  }\n\n  function addIngredient(item) {\n    let newIngredient = item;\n    newIngredient.uuid = uuidv4();\n    console.log(newIngredient);\n    let arr = allData;\n\n    let changedFoodItem = {};\n    console.log(props);\n\n    for (let i = 0; i <= arr.length - 1; i++) {\n      if (arr[i].uuid === props.location.state.foodItem.uuid) {\n        arr[i].ingredients.push(newIngredient);\n        changedFoodItem = arr[i];\n      }\n    }\n    console.log(changedFoodItem);\n    console.log(arr);\n    axios\n      .put(\n        `http://localhost:3001/recipes/${props.location.state.foodItem.uuid}`,\n        changedFoodItem\n      )\n      .then(() => setAllIngredients(() => [...changedFoodItem.ingredients]))\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n    setFoodItem(changedFoodItem);\n  }\n  return (\n    <div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Example Modal\"\n        style={customStyles}\n        ariaHideApp={false}\n      >\n        <CloseModalButton className=\"btn btn-secondary\" onClick={closeModal}>\n          X\n        </CloseModalButton>\n        <div className=\"ingredient-form\">\n          <h4>Ingredient</h4>\n          <Formik\n            enableReinitialize\n            initialValues={{\n              amount: selectedIngredient.amount,\n              measurement: selectedIngredient.measurement,\n              name: selectedIngredient.name,\n            }}\n            onSubmit={handleSubmit}\n            render={(formikProps) => (\n              <Form>\n                <div style={{ position: \"absolute\", float: \"left\" }}>\n                  <label className=\"form-label\">Amount</label>\n                  <Field\n                    name=\"amount\"\n                    type=\"number\"\n                    step={0.1}\n                    placeholder=\"How much?\"\n                    className=\"text-input\"\n                  />\n                </div>\n                <div style={{ marginLeft: 250 }}>\n                  <label className=\"form-label\">Measurement</label>\n                  <Field name=\"measurement\" className=\"text-input-ingredients\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          placeholder=\"Ex. teaspoon\"\n                          {...field}\n                          type=\"text\"\n                          className=\"text-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <div style={{ postion: \"absolute\", marginTop: 15 }}>\n                  <label className=\"form-label\">Name</label>\n                  <Field name=\"name\" type=\"text\" className=\"text-input\">\n                    {({ field, form, meta }) => (\n                      <span>\n                        <input\n                          {...field}\n                          placeholder=\"Enter ingredient name\"\n                          type=\"text\"\n                          className=\"text-input\"\n                        />\n                      </span>\n                    )}\n                  </Field>\n                </div>\n                <IngredientButton className=\"btn btn-primary\" type=\"submit\">\n                  Submit Ingredient\n                </IngredientButton>\n              </Form>\n            )}\n          />\n        </div>\n      </Modal>\n\n      <div className=\"ingredients-container\">\n        <h1 className=\"ingredients-header\">Ingredients </h1>\n        <div style={{ marginTop: 15 }}>\n          <ul>\n            {allIngredients.map((item, index) => (\n              <li style={{ marginTop: 15 }} key={index}>\n                <span style={{ fontWeight: \"bold\" }}>Name:</span>\n                {item.name}{\" \"}\n                <span style={{ fontWeight: \"bold\", marginLeft: 5 }}>\n                  Measurement:\n                </span>\n                {item.measurement}{\" \"}\n                <span style={{ fontWeight: \"bold\", marginLeft: 5 }}>\n                  Amount:\n                </span>\n                {item.amount}\n                <button\n                  onClick={() => openModal(foodItem, item)}\n                  style={{ marginLeft: 5 }}\n                >\n                  Edit\n                </button>\n              </li>\n            ))}\n          </ul>\n          <div style={{ marginLeft: 30, paddingBottom: 30 }}>\n            <Formik\n              enableReinitialize\n              initialValues={{}}\n              onSubmit={addIngredient}\n            >\n              {(formikProps) => (\n                <Form>\n                  <div style={{ position: \"absolute\", float: \"left\" }}>\n                    <label className=\"form-label\">Amount</label>\n                    <Field\n                      name=\"amount\"\n                      type=\"number\"\n                      step={0.1}\n                      placeholder=\"How much?\"\n                      className=\"text-input\"\n                    />\n                  </div>\n                  <div style={{ marginLeft: 250 }}>\n                    <label className=\"form-label\">Measurement</label>\n                    <Field\n                      name=\"measurement\"\n                      className=\"text-input-ingredients\"\n                    >\n                      {({ field, form, meta }) => (\n                        <span>\n                          <input\n                            placeholder=\"Ex. teaspoon\"\n                            {...field}\n                            type=\"text\"\n                            className=\"text-input\"\n                          />\n                        </span>\n                      )}\n                    </Field>\n                  </div>\n                  <div\n                    style={{\n                      float: \"left\",\n                      postion: \"absolute\",\n                      marginTop: 15,\n                    }}\n                  >\n                    <label className=\"form-label\">Name</label>\n                    <Field name=\"name\" type=\"text\" className=\"text-input\">\n                      {({ field, form, meta }) => (\n                        <span>\n                          <input\n                            {...field}\n                            placeholder=\"Enter ingredient name\"\n                            type=\"text\"\n                            className=\"text-input\"\n                          />\n                        </span>\n                      )}\n                    </Field>\n                  </div>\n                  <button\n                    type=\"submit\"\n                    style={{ marginTop: 15, marginLeft: 20 }}\n                    className=\"btn btn-warning\"\n                  >\n                    Add Ingredient\n                  </button>\n                </Form>\n              )}\n            </Formik>\n          </div>\n          {/* <button\n          className=\"btn btn-warning\"\n          style={{ position: \"relative\", marginBottom: 5, marginLeft: 400 }}\n        >\n          Add an ingredient\n        </button> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Ingredients;\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":23,"column":10,"nodeType":"48","messageId":"49","endLine":23,"endColumn":21},{"ruleId":"46","severity":1,"message":"50","line":23,"column":23,"nodeType":"48","messageId":"49","endLine":23,"endColumn":37},{"ruleId":"46","severity":1,"message":"51","line":26,"column":10,"nodeType":"48","messageId":"49","endLine":26,"endColumn":18},{"ruleId":"46","severity":1,"message":"52","line":26,"column":20,"nodeType":"48","messageId":"49","endLine":26,"endColumn":31},{"ruleId":"46","severity":1,"message":"53","line":60,"column":12,"nodeType":"48","messageId":"49","endLine":60,"endColumn":20},{"ruleId":"54","severity":1,"message":"55","line":245,"column":26,"nodeType":"56","messageId":"57","endLine":245,"endColumn":28},{"ruleId":"58","severity":1,"message":"59","line":254,"column":15,"nodeType":"60","endLine":260,"endColumn":17},{"ruleId":"46","severity":1,"message":"61","line":3,"column":27,"nodeType":"48","messageId":"49","endLine":3,"endColumn":36},{"ruleId":"46","severity":1,"message":"62","line":19,"column":9,"nodeType":"48","messageId":"49","endLine":19,"endColumn":16},{"ruleId":"63","severity":1,"message":"64","line":38,"column":6,"nodeType":"65","endLine":38,"endColumn":8,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'allSpecials' is assigned a value but never used.","Identifier","unusedVar","'setAllSpecials' is assigned a value but never used.","'formList' is assigned a value but never used.","'setFormList' is assigned a value but never used.","'editItem' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state.foodItem'. Either include it or remove the dependency array. If 'setFoodItem' needs the current value of 'props.location.state.foodItem', you can also switch to useReducer instead of useState and read 'props.location.state.foodItem' in the reducer.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [props.location.state.foodItem]",{"range":"72","text":"73"},[1237,1239],"[props.location.state.foodItem]"]