[{"/Users/oladayoogundipe/RecipeBuilder/src/index.js":"1","/Users/oladayoogundipe/RecipeBuilder/src/App.js":"2","/Users/oladayoogundipe/RecipeBuilder/src/components/DirectionsPage.js":"3","/Users/oladayoogundipe/RecipeBuilder/src/components/Home.js":"4","/Users/oladayoogundipe/RecipeBuilder/src/components/SpecialsPage.js":"5","/Users/oladayoogundipe/RecipeBuilder/src/components/IngredientsPage.js":"6","/Users/oladayoogundipe/RecipeBuilder/src/state/store.js":"7","/Users/oladayoogundipe/RecipeBuilder/src/components/EditDirectionModal.js":"8","/Users/oladayoogundipe/RecipeBuilder/src/components/AddDirectionModal.js":"9","/Users/oladayoogundipe/RecipeBuilder/src/components/AddRecipeModal.js":"10","/Users/oladayoogundipe/RecipeBuilder/src/components/EditRecipeModal.js":"11","/Users/oladayoogundipe/RecipeBuilder/src/components/AddIngredientModal.js":"12","/Users/oladayoogundipe/RecipeBuilder/src/components/EditIngredientModal.js":"13","/Users/oladayoogundipe/RecipeBuilder/src/actions/specials.js":"14","/Users/oladayoogundipe/RecipeBuilder/src/actions/recipes.js":"15","/Users/oladayoogundipe/RecipeBuilder/src/mockData/recipes.js":"16","/Users/oladayoogundipe/RecipeBuilder/src/reducers/index.js":"17","/Users/oladayoogundipe/RecipeBuilder/src/reducers/specials.js":"18","/Users/oladayoogundipe/RecipeBuilder/src/reducers/recipes.js":"19"},{"size":139,"mtime":1613167769537,"results":"20","hashOfConfig":"21"},{"size":1034,"mtime":1614709361454,"results":"22","hashOfConfig":"21"},{"size":5407,"mtime":1613420962742,"results":"23","hashOfConfig":"21"},{"size":8136,"mtime":1614711034519,"results":"24","hashOfConfig":"21"},{"size":3845,"mtime":1613420754616,"results":"25","hashOfConfig":"21"},{"size":4852,"mtime":1613168295618,"results":"26","hashOfConfig":"21"},{"size":701,"mtime":1613184772229,"results":"27","hashOfConfig":"21"},{"size":4031,"mtime":1613187956822,"results":"28","hashOfConfig":"21"},{"size":3643,"mtime":1613251246185,"results":"29","hashOfConfig":"21"},{"size":10126,"mtime":1613250724028,"results":"30","hashOfConfig":"21"},{"size":5636,"mtime":1612390830088,"results":"31","hashOfConfig":"21"},{"size":3013,"mtime":1613251270448,"results":"32","hashOfConfig":"21"},{"size":3693,"mtime":1612387237276,"results":"33","hashOfConfig":"21"},{"size":509,"mtime":1613251980893,"results":"34","hashOfConfig":"21"},{"size":4323,"mtime":1614710329792,"results":"35","hashOfConfig":"21"},{"size":16554,"mtime":1614710818067,"results":"36","hashOfConfig":"21"},{"size":276,"mtime":1611056878103,"results":"37","hashOfConfig":"21"},{"size":440,"mtime":1612152894372,"results":"38","hashOfConfig":"21"},{"size":2671,"mtime":1614708930602,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"13mty86",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/oladayoogundipe/RecipeBuilder/src/index.js",[],["89","90"],"/Users/oladayoogundipe/RecipeBuilder/src/App.js",[],"/Users/oladayoogundipe/RecipeBuilder/src/components/DirectionsPage.js",["91"],"import React, { useState, useEffect } from \"react\";\nimport \"./Home.css\";\nimport {\n  AppBar,\n  makeStyles,\n  Toolbar,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  CardActionArea,\n} from \"@material-ui/core/\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { getCurrentRecipe } from \"../actions/recipes\";\nimport AddDirection from \"./AddDirectionModal\";\nimport EditDirection from \"./EditDirectionModal\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  specialsButton: {},\n  addRecipeButton: {\n    left: 10,\n  },\n  navButtonContainer: {\n    marginRight: theme.spacing(3),\n    right: 0,\n    position: \"absolute\",\n  },\n\n  directionsList: {\n    marginLeft: 350,\n  },\n  gridList: {\n    height: \"auto\",\n    flexWrap: \"wrap\",\n\n    overflow: \"auto\",\n    paddingTop: 50,\n  },\n\n  card: {\n    maxWidth: 345,\n    width: 500,\n    display: \"block\",\n    overflowY: \"scroll\",\n    marginLeft: 150,\n  },\n\n  directionsInstruction: {\n    fontSize: 20,\n  },\n  directionsOptional: {\n    fontSize: 18,\n  },\n}));\n\nfunction Directions() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { recipeId } = useParams();\n  const [open, setOpen] = useState(false);\n  const [openForEdit, setOpenForEdit] = useState(false);\n  const [currentDirection, setCurrentDirection] = useState({});\n  const [currentDirectionIndex, setCurrentDirectionIndex] = useState(0);\n  const classes = useStyles();\n\n  //get current recipe by uuid in params\n  useEffect(() => {\n    dispatch(getCurrentRecipe(recipeId));\n  }, []);\n\n  const directions = useSelector(\n    (state) => state.recipes.currentRecipe.directions\n  );\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  const handleEditClose = (value) => {\n    setOpenForEdit(false);\n  };\n\n  //push current recipe to state to prefill form\n  const handleClickEditOpen = (tile, index) => {\n    setCurrentDirection(tile);\n\n    setCurrentDirectionIndex(index);\n    setOpenForEdit(true);\n  };\n\n  //change option to show yes or no\n  function changeOptionToString(value) {\n    if (value === false || value === undefined || value === \"\") {\n      return \"No\";\n    } else {\n      return \"Yes\";\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Directions\n          </Typography>\n          <div className={classes.navButtonContainer}>\n            <Button\n              variant=\"outlined\"\n              className={classes.specialsButton}\n              color=\"inherit\"\n              onClick={() => history.push(\"/specials\")}\n            >\n              View the Specials\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.specialsButton}\n              color=\"inherit\"\n              onClick={handleClickOpen}\n            >\n              Add Direction\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.specialsButton}\n              color=\"inherit\"\n              onClick={() => history.push(\"/\")}\n            >\n              Go to Home Page\n            </Button>\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <AddDirection open={open} onClose={handleClose} />\n      <EditDirection\n        currentDirection={currentDirection}\n        open={openForEdit}\n        index={currentDirectionIndex}\n        onClose={handleEditClose}\n      />\n      <div className={classes.directionsList}>\n        <Grid\n          className={classes.gridList}\n          container\n          justify=\"center\"\n          spacing={1}\n        >\n          {directions.map((tile, index) => (\n            <Grid container item xs={12} spacing={0.1}>\n              <Card className={classes.card}>\n                <CardActionArea>\n                  <CardContent>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"div\"\n                      className=\"text-center\"\n                    >\n                      <span className={classes.directionsInstruction}>\n                        {tile.instructions}\n                      </span>\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"div\"\n                      className=\"text-center\"\n                    >\n                      <span className={classes.directionsOptional}>\n                        {\" \"}\n                        Optional: {changeOptionToString(tile.optional)}\n                      </span>\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions disableSpacing>\n                  <Button\n                    onClick={() => handleClickEditOpen(tile, index)}\n                    size=\"small\"\n                    color=\"primary\"\n                  >\n                    Edit\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Directions;\n","/Users/oladayoogundipe/RecipeBuilder/src/components/Home.js",["92","93","94","95","96","97","98"],"/Users/oladayoogundipe/RecipeBuilder/src/components/SpecialsPage.js",["99","100"],"import React, { useState, useEffect } from \"react\";\nimport \"./Home.css\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getSpecials } from \"../actions/specials\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  CardActionArea,\n  makeStyles,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  specialsButton: {},\n\n  navButtonContainer: {\n    marginRight: theme.spacing(3),\n    right: 0,\n    position: \"absolute\",\n  },\n\n  gridList: {\n    height: \"auto\",\n    flexWrap: \"wrap\",\n\n    overflow: \"auto\",\n    paddingTop: 50,\n  },\n\n  card: {\n    width: 500,\n    display: \"block\",\n    overflowY: \"scroll\",\n    marginLeft: 390,\n  },\n  boldText: {\n    fontWeight: \"bold\",\n  },\n  specialsTitle: {},\n}));\n\nfunction Specials() {\n  const dispatch = useDispatch();\n  const specials = useSelector((state) => state.specials);\n  const history = useHistory();\n  const classes = useStyles();\n\n  //retrieve all the specials in database\n  useEffect(() => {\n    dispatch(getSpecials());\n  }, []);\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Specials\n          </Typography>\n          <div className={classes.navButtonContainer}>\n            <Button\n              variant=\"outlined\"\n              className={classes.specialsButton}\n              color=\"inherit\"\n              onClick={() => history.push(\"/\")}\n            >\n              Go to Home Page\n            </Button>\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <div className={classes.specialsList}>\n        <Grid\n          className={classes.gridList}\n          container\n          justify=\"center\"\n          spacing={1}\n        >\n          {specials &&\n            specials.specialsList.map((tile, index) => (\n              <Grid container item xs={12} spacing={0.1}>\n                <Card className={classes.card}>\n                  <CardActionArea>\n                    <CardContent>\n                      <Typography variant=\"h6\" className=\"text-center\">\n                        <span className=\"specials-title\">{tile.title}</span>\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"div\"\n                        className=\"text-center\"\n                      >\n                        <span classNane=\"specials-text\">{tile.text}</span>\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"div\"\n                        className=\"text-center\"\n                      >\n                        <span className=\"specails-type\">\n                          <span className=\"bold-text\">type:</span> {tile.type}\n                        </span>\n                      </Typography>\n                      {tile.code && (\n                        <Typography\n                          variant=\"body2\"\n                          color=\"textSecondary\"\n                          component=\"div\"\n                          className=\"text-center\"\n                        >\n                          <span className=\"specials-code\">\n                            <span className=\"bold-text\">USE CODE:</span>{\" \"}\n                            {tile.code}\n                          </span>\n                        </Typography>\n                      )}\n                    </CardContent>\n                  </CardActionArea>\n                </Card>\n              </Grid>\n            ))}\n        </Grid>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Specials;\n","/Users/oladayoogundipe/RecipeBuilder/src/components/IngredientsPage.js",["101","102","103","104"],"import styled from \"styled-components\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./Home.css\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  makeStyles,\n  Button,\n  Grid,\n  Card,\n  CardActions,\n  CardContent,\n  CardActionArea,\n} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport AddIngredient from \"./AddIngredientModal\";\nimport EditIngredient from \"./EditIngredientModal\";\nimport {\n  getCurrentRecipe,\n  updateIngredient,\n  saveCurrentRecipe,\n} from \"../actions/recipes\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  specialsButton: {},\n\n  navButtonContainer: {\n    marginRight: theme.spacing(3),\n    right: 0,\n    position: \"absolute\",\n  },\n\n  gridList: {\n    height: \"auto\",\n    flexWrap: \"wrap\",\n    overflow: \"auto\",\n    paddingTop: 50,\n  },\n\n  card: {\n    maxWidth: 345,\n    width: 345,\n    display: \"block\",\n    overflowY: \"scroll\",\n    marginLeft: 150,\n  },\n}));\n\nfunction Ingredients() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { recipeId } = useParams();\n  const [open, setOpen] = useState(false);\n  const [openForEdit, setOpenForEdit] = useState(false);\n  const [currentIngredient, setCurrentIngredient] = useState({});\n  const classes = useStyles();\n  useEffect(() => {\n    dispatch(getCurrentRecipe(recipeId));\n  }, []);\n\n  //grad the current ingredient from redux\n  const ingredients = useSelector(\n    (state) => state.recipes.currentRecipe.ingredients\n  );\n\n  //open the add new ingredient modal\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  //close the add new ingredient modal\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  //close the edit ingredient modal\n  const handleEditClose = (value) => {\n    setOpenForEdit(false);\n  };\n\n  //open the edit ingredient modal and set the current ingredient click to state\n  const handleClickEditOpen = (tile) => {\n    setCurrentIngredient(tile);\n    setOpenForEdit(true);\n  };\n\n  return (\n    <React.Fragment>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Recipe List\n          </Typography>\n          <div className={classes.navButtonContainer}>\n            <Button\n              variant=\"outlined\"\n              className={classes.specialsButton}\n              color=\"inherit\"\n              onClick={() => history.push(\"/specials\")}\n            >\n              View the Specials\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.specialsButton}\n              color=\"inherit\"\n              onClick={handleClickOpen}\n            >\n              Add Ingredient\n            </Button>\n            <Button\n              variant=\"outlined\"\n              className={classes.specialsButton}\n              color=\"inherit\"\n              onClick={() => history.push(\"/\")}\n            >\n              Go to Home Page\n            </Button>\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <AddIngredient open={open} onClose={handleClose} />\n      <EditIngredient\n        currentIngredient={currentIngredient}\n        open={openForEdit}\n        onClose={handleEditClose}\n      />\n      <div className={classes.ingredientsList}>\n        <Grid\n          className={classes.gridList}\n          container\n          justify=\"center\"\n          spacing={1}\n        >\n          {ingredients.map((tile, index) => (\n            <Grid container item xs={12} sm={6} spacing={0.1}>\n              <Card className={classes.card}>\n                <CardActionArea>\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      {tile.name}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      Measurement: {tile.measurement}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      Amount: {tile.amount}\n                    </Typography>\n                  </CardContent>\n                </CardActionArea>\n                <CardActions disableSpacing>\n                  <Button\n                    onClick={() => handleClickEditOpen(tile)}\n                    size=\"small\"\n                    color=\"primary\"\n                  >\n                    Edit\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Ingredients;\n","/Users/oladayoogundipe/RecipeBuilder/src/state/store.js",[],"/Users/oladayoogundipe/RecipeBuilder/src/components/EditDirectionModal.js",["105","106","107"],"import React, { useState, useEffect } from \"react\";\n\nimport {\n  Button,\n  TextareaAutosize,\n  InputLabel,\n  DialogTitle,\n  Dialog,\n  Select,\n  Box,\n  MenuItem,\n  FormControl,\n  makeStyles,\n} from \"@material-ui/core\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport moment from \"moment\";\n\nimport { saveCurrentRecipe, updateDirection } from \"../actions/recipes\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n\n  form: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n    \"& .instruction-text-area\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n      borderTop: \"none\",\n      borderRight: \"none\",\n      borderLeft: \"none\",\n    },\n    \"& .optionalFormControl\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n\n    paddingBottom: 40,\n    marginLeft: 90,\n    marginTop: 50,\n  },\n}));\n\nfunction EditDirection(props) {\n  const classes = useStyles();\n  const { onClose, open, currentDirection, index } = props;\n  const dispatch = useDispatch();\n  const [openOptions, setOptionsOpen] = React.useState(false);\n  const [instruction, setInstruction] = useState(currentDirection.instructions);\n  const [optional, setOptional] = useState(currentDirection.optional);\n\n  useEffect(\n    () => {\n      //set driection information to state\n      setInstruction(currentDirection.instructions);\n      setOptional(currentDirection.optional);\n    },\n    [currentDirection.instruction, currentDirection.optional],\n    index\n  );\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleInstructionChange = (e) => {\n    setInstruction(e.target.value);\n  };\n  const handleOptionsChange = (e) => {\n    setOptional(e.target.value);\n  };\n  const handleOptionsClose = () => {\n    setOptionsOpen(false);\n  };\n  const handleOptionsOpen = () => {\n    setOptionsOpen(true);\n  };\n\n  function editItem() {\n    const date = moment().format(\"L\");\n    const time = moment().format(\"LTS\");\n    const dateAndTime = date + \" \" + time;\n\n    //creating a new direction\n    const newDirection = {\n      instructions: instruction,\n      optional: optional,\n    };\n\n    dispatch(updateDirection(newDirection, index));\n    dispatch(saveCurrentRecipe());\n\n    handleClose();\n  }\n\n  return (\n    <Dialog\n      maxWidth={\"xs\"}\n      fullWidth={true}\n      onClose={handleClose}\n      aria-labelledby=\"edit-ingredient\"\n      open={open}\n    >\n      <DialogTitle id=\"edit-ingredient\">Edit Ingredient</DialogTitle>\n\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <div>\n          <InputLabel id=\"instruction\">Instruction</InputLabel>\n          <TextareaAutosize\n            rowsMax={4}\n            aria-label=\"instruction\"\n            placeholder=\"Enter an instruction\"\n            className=\"instruction-text-area\"\n            onChange={handleInstructionChange}\n            value={instruction}\n          />\n          <InputLabel id=\"measurement\">Measurement</InputLabel>\n          <FormControl className=\"optionalFormControl\">\n            <InputLabel className=\"optional\" id=\"optional\">\n              Optional\n            </InputLabel>\n            <Select\n              labelId=\"optional\"\n              id=\"demo-controlled-open-select\"\n              className=\"optionalLabel\"\n              open={openOptions}\n              onClose={handleOptionsClose}\n              onOpen={handleOptionsOpen}\n              onChange={handleOptionsChange}\n              value={optional}\n            >\n              <MenuItem value={false}>\n                <em>None</em>\n              </MenuItem>\n              <MenuItem value={true}>Yes</MenuItem>\n              <MenuItem value={false}>No</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n      </form>\n\n      <Box mb={3} ml={25} pb={3}>\n        <Button\n          onClick={editItem}\n          size=\"medium\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Edit Direction\n        </Button>\n      </Box>\n    </Dialog>\n  );\n}\nexport default EditDirection;\n","/Users/oladayoogundipe/RecipeBuilder/src/components/AddDirectionModal.js",["108","109"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  TextareaAutosize,\n  InputLabel,\n  DialogTitle,\n  Dialog,\n  Select,\n  Box,\n  MenuItem,\n  FormControl,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { addNewDirection, saveCurrentRecipe } from \"../actions/recipes\";\nimport { useSelector, useDispatch } from \"react-redux\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 300,\n    width: 100,\n  },\n  form: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n    \"& .instruction-text-area\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n      borderTop: \"none\",\n      borderRight: \"none\",\n      borderLeft: \"none\",\n    },\n    \"& .optionalFormControl\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n\n    paddingBottom: 40,\n    marginLeft: 100,\n    marginTop: 50,\n  },\n  addRecipeButton: {\n    marginLeft: 40,\n    position: \"absolute\",\n  },\n}));\n\nfunction AddDirection(props) {\n  const classes = useStyles();\n  const { onClose, open } = props;\n\n  const [optional, setOptional] = useState(false);\n  const [instruction, setInstruction] = useState(\"\");\n  const dispatch = useDispatch();\n  const [openOptions, setOptionsOpen] = React.useState(false);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  //close options modal\n  const handleOptionsClose = () => {\n    setOptionsOpen(false);\n  };\n\n  const handleInstructionChange = (e) => {\n    setInstruction(e.target.value);\n  };\n\n  const handleOptionsOpen = () => {\n    setOptionsOpen(true);\n  };\n\n  const handleOptionsChange = (e) => {\n    setOptional(e.target.value);\n  };\n\n  //add direction to state and save the current recipe\n  function addDirection() {\n    const newDirection = {\n      instructions: instruction,\n      optional,\n    };\n\n    dispatch(addNewDirection(newDirection));\n    dispatch(saveCurrentRecipe());\n    handleClose();\n  }\n\n  return (\n    <Dialog\n      maxWidth={\"xs\"}\n      fullWidth={true}\n      onClose={handleClose}\n      aria-labelledby=\"edit-direction\"\n      open={open}\n    >\n      <DialogTitle id=\"edit-direction\">Edit Direction</DialogTitle>\n\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <div>\n          <InputLabel id=\"instruction\">Instruction</InputLabel>\n          <TextareaAutosize\n            rowsMax={4}\n            aria-label=\"instruction\"\n            placeholder=\"Enter an instruction\"\n            className=\"instruction-text-area\"\n            onChange={handleInstructionChange}\n          />\n          <InputLabel id=\"measurement\">Measurement</InputLabel>\n          <FormControl className=\"optionalFormControl\">\n            <InputLabel className=\"optional\" id=\"optional\">\n              Optional\n            </InputLabel>\n            <Select\n              labelId=\"optional\"\n              id=\"demo-controlled-open-select\"\n              className=\"optionalLabel\"\n              open={openOptions}\n              onClose={handleOptionsClose}\n              onOpen={handleOptionsOpen}\n              onChange={handleOptionsChange}\n            >\n              <MenuItem value={false}>\n                <em>None</em>\n              </MenuItem>\n              <MenuItem value={true}>Yes</MenuItem>\n              <MenuItem value={false}>No</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n      </form>\n\n      <Box mb={3} ml={25} pb={3}>\n        <Button\n          onClick={addDirection}\n          size=\"medium\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add Direction\n        </Button>\n      </Box>\n    </Dialog>\n  );\n}\nexport default AddDirection;\n","/Users/oladayoogundipe/RecipeBuilder/src/components/AddRecipeModal.js",["110","111","112"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  TextField,\n  TextareaAutosize,\n  Typography,\n  InputLabel,\n  DialogTitle,\n  Dialog,\n  Select,\n  Box,\n  MenuItem,\n  FormControl,\n  Grid,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { addRecipe, postNewRecipe } from \"../actions/recipes\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n\n  form: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n    \"& .instruction-text-area\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n      borderTop: \"none\",\n      borderRight: \"none\",\n      borderLeft: \"none\",\n    },\n    \"& .optionalFormControl\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n\n    paddingBottom: 40,\n    marginLeft: 100,\n    marginTop: 50,\n  },\n}));\n\nfunction AddRecipe(props) {\n  const classes = useStyles();\n  const { onClose, open } = props;\n\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [measurement, setMeasurement] = useState(\"\");\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [servings, setServings] = useState(\"\");\n  const [prepTime, setPrepTime] = useState(\"\");\n  const [cookTime, setCookTime] = useState(\"\");\n  const [optional, setOptional] = useState(false);\n  const [instruction, setInstruction] = useState(\"\");\n  const [openOptions, setOptionsOpen] = React.useState(false);\n  const [ingredients, setIngredients] = useState([]);\n  const [directions, setDriections] = useState([]);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleOptionsClose = () => {\n    setOptionsOpen(false);\n  };\n\n  const handleInstructionChange = (e) => {\n    setInstruction(e.target.value);\n  };\n\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  };\n\n  const handleDescriptionChange = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const handleServingsChange = (e) => {\n    setServings(e.target.value);\n  };\n\n  const handlePrepTimeChange = (e) => {\n    setPrepTime(e.target.value);\n  };\n\n  const handleCookTimeChange = (e) => {\n    setCookTime(e.target.value);\n  };\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleAmountChange = (e) => {\n    setAmount(e.target.value);\n  };\n\n  const handleMeasurementChange = (e) => {\n    setMeasurement(e.target.value);\n  };\n\n  //open the options list\n  const handleOptionsOpen = () => {\n    setOptionsOpen(true);\n  };\n\n  const handleOptionsChange = (e) => {\n    setOptional(e.target.value);\n  };\n\n  //add Direction to a list before submitting\n  function addDirection() {\n    const arr = directions;\n    const formDirection = {};\n    formDirection[\"optional\"] = optional;\n    formDirection[\"instruction\"] = instruction;\n\n    if (optional === true) {\n      formDirection.optional = \"Yes\";\n    }\n    if (optional === false) {\n      formDirection.optional = \"No\";\n    }\n    arr.push(formDirection);\n    setDriections(() => [...arr]);\n  }\n\n  const dispatch = useDispatch();\n\n  //form for submitting a new recipe\n  function addFoodItem() {\n    const date = moment().format(\"L\");\n    const time = moment().format(\"LTS\");\n    const dateAndTime = date + \" \" + time;\n\n    const newRecipe = {\n      uuid: uuidv4(),\n      title: title,\n      description: description,\n      servings: servings,\n      cookTime: cookTime,\n      prepTime: prepTime,\n      ingredients: ingredients,\n      directions: directions,\n      postDate: dateAndTime,\n    };\n\n    onClose();\n\n    dispatch(addRecipe(newRecipe));\n  }\n\n  //create ingredients for recipe\n  function addIngredient(data) {\n    let arr = ingredients;\n    const formInstruction = {};\n    formInstruction[\"name\"] = name;\n    formInstruction[\"amount\"] = amount;\n    formInstruction[\"measurement\"] = measurement;\n    formInstruction.uuid = uuidv4();\n\n    arr.push(formInstruction);\n    setIngredients(() => [...arr]);\n    console.log(ingredients);\n  }\n\n  return (\n    <Dialog\n      maxWidth={\"lg\"}\n      onClose={handleClose}\n      aria-labelledby=\"add-recipe\"\n      open={open}\n    >\n      <DialogTitle id=\"add-recipe\">Add Recipe</DialogTitle>\n\n      <Grid justify=\"center\" container spacing={12}>\n        <Grid container item xs={4} spacing={3}>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <h6>Food definition</h6>\n            <div>\n              <TextField\n                id=\"title\"\n                label=\"The name of the food\"\n                placeholder=\"Enter a name\"\n                onChange={handleTitleChange}\n              />\n              <TextareaAutosize\n                rowsMax={4}\n                aria-label=\"description\"\n                placeholder=\"Enter a description\"\n                className=\"instruction-text-area\"\n                onChange={handleDescriptionChange}\n              />\n\n              <TextField\n                id=\"servings\"\n                label=\"Servings\"\n                type=\"number\"\n                placeholder=\"Enter the amount of servings\"\n                onChange={handleServingsChange}\n              />\n              <TextField\n                id=\"prepTime\"\n                type=\"number\"\n                label=\"Prep time (in mins)\"\n                placeholder=\"Enter the prep time\"\n                onChange={handlePrepTimeChange}\n              />\n              <TextField\n                id=\"cookTime\"\n                label=\"Cook time (in mins)\"\n                type=\"number\"\n                placeholder=\"Enter the cook time\"\n                onChange={handleCookTimeChange}\n              />\n            </div>\n          </form>\n        </Grid>\n        <Grid container item xs={4} spacing={1}>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <h6>Ingredients definition</h6>\n            <div>\n              <TextField\n                id=\"name\"\n                label=\"Ingredient Name\"\n                placeholder=\"Enter the ingredient name\"\n                onChange={handleNameChange}\n              />\n              <TextField\n                id=\"amount\"\n                label=\"Amount\"\n                placeholder=\"Enter the amount\"\n                inputProps={{\n                  step: 0.1,\n                }}\n                type=\"number\"\n                onChange={handleAmountChange}\n              />\n              <TextField\n                id=\"measurement\"\n                label=\"Mesurement\"\n                placeholder=\"Enter the measurement\"\n                onChange={handleMeasurementChange}\n              />\n              <Button\n                onClick={addIngredient}\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                Add Ingredient to List\n              </Button>\n            </div>\n          </form>\n          <ul>\n            {ingredients.map((item, index) => (\n              <li>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  <span className=\"bold-text\">Name</span> {item.name}\n                </Typography>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  <span className=\"bold-text\">Amount:</span> {item.amount}\n                </Typography>\n                <Typography gutterBottom variant=\"body2\" component=\"p\">\n                  <span className=\"bold-text\">Mesurement</span>{\" \"}\n                  {item.measurement}\n                </Typography>\n              </li>\n            ))}\n          </ul>\n        </Grid>\n        <Grid container item xs={4} spacing={3}>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <h6>Direction definition</h6>\n            <div>\n              <TextareaAutosize\n                rowsMax={4}\n                aria-label=\"instruction\"\n                placeholder=\"Enter an instruction\"\n                className=\"instruction-text-area\"\n                onChange={handleInstructionChange}\n              />\n              <FormControl className=\"optionalFormControl\">\n                <InputLabel\n                  className=\"optional\"\n                  id=\"demo-controlled-open-select-label\"\n                >\n                  Optional\n                </InputLabel>\n                <Select\n                  labelId=\"demo-controlled-open-select-label\"\n                  id=\"demo-controlled-open-select\"\n                  className=\"optionalLabel\"\n                  open={openOptions}\n                  onClose={handleOptionsClose}\n                  onOpen={handleOptionsOpen}\n                  onChange={handleOptionsChange}\n                >\n                  <MenuItem value={false}>\n                    <em>None</em>\n                  </MenuItem>\n                  <MenuItem value={true}>Yes</MenuItem>\n                  <MenuItem value={false}>No</MenuItem>\n                </Select>\n              </FormControl>\n              <Button\n                onClick={addDirection}\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                Add Direction to List\n              </Button>\n            </div>\n          </form>\n          <Box mb={15}>\n            <ul>\n              {directions.map((item, index) => (\n                <li>\n                  <Typography gutterBottom variant=\"body2\" component=\"p\">\n                    <span className=\"bold-text\">Instruction</span>{\" \"}\n                    {item.instruction}\n                  </Typography>\n                  <Typography gutterBottom variant=\"body2\" component=\"p\">\n                    <span className=\"bold-text\">Optional</span> {item.optional}\n                  </Typography>\n                </li>\n              ))}\n            </ul>\n          </Box>\n        </Grid>\n      </Grid>\n      <Box mb={3} ml={140} pb={30}>\n        <Button\n          onClick={addFoodItem}\n          size=\"medium\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add Recipe\n        </Button>\n      </Box>\n    </Dialog>\n  );\n}\nexport default AddRecipe;\n","/Users/oladayoogundipe/RecipeBuilder/src/components/EditRecipeModal.js",["113","114"],"import React, { useState, useEffect } from \"react\";\n\nimport {\n  makeStyles,\n  InputLabel,\n  DialogTitle,\n  Dialog,\n  Box,\n  Grid,\n  Button,\n  TextField,\n  TextareaAutosize,\n} from \"@material-ui/core\";\n\nimport styled from \"styled-components\";\n\nimport { updateRecipe, saveCurrentRecipe } from \"../actions/recipes\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 300,\n    width: 100,\n  },\n  form: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n    \"& .instruction-text-area\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n      borderTop: \"none\",\n      borderRight: \"none\",\n      borderLeft: \"none\",\n    },\n    \"& .optionalFormControl\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n    paddingBottom: 40,\n    marginTop: 50,\n  },\n}));\n\nfunction EditRecipe(props) {\n  const classes = useStyles();\n  const { onClose, open, currentRecipe } = props;\n  const dispatch = useDispatch();\n\n  console.log(currentRecipe.title);\n\n  const [title, setTitle] = useState(currentRecipe.title);\n  const [description, setDescription] = useState(currentRecipe.description);\n  const [servings, setServings] = useState(currentRecipe.servings);\n  const [prepTime, setPrepTime] = useState(currentRecipe.prepTime);\n  const [cookTime, setCookTime] = useState(currentRecipe.cookTime);\n  useEffect(() => {\n    //get set state to recipe data\n    setTitle(currentRecipe.title);\n    setDescription(currentRecipe.description);\n    setServings(currentRecipe.servings);\n    setPrepTime(currentRecipe.prepTime);\n    setCookTime(currentRecipe.cookTime);\n  }, [\n    currentRecipe.title,\n    currentRecipe.description,\n    currentRecipe.servings,\n    currentRecipe.prepTime,\n    currentRecipe.cookTime,\n  ]);\n\n  //close the add new recipe modal\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  };\n  const handleDescriptionChange = (e) => {\n    setDescription(e.target.value);\n  };\n  const handleServingsChange = (e) => {\n    setServings(e.target.value);\n  };\n  const handlePrepTimeChange = (e) => {\n    setPrepTime(e.target.value);\n  };\n\n  const handleCookTimeChange = (e) => {\n    setCookTime(e.target.value);\n    console.log(e.target.value);\n  };\n\n  function editItem(form) {\n    const date = moment().format(\"L\");\n    const time = moment().format(\"LTS\");\n    const dateAndTime = date + \" \" + time;\n\n    //new recipe with form data\n    const newRecipe = {\n      uuid: currentRecipe.uuid,\n      title: title,\n      description: description,\n      servings: servings,\n      prepTime: prepTime,\n      cookTime: cookTime,\n      postDate: currentRecipe.postDate,\n      editDate: dateAndTime,\n      images: currentRecipe.images,\n      directions: currentRecipe.directions,\n      ingredients: currentRecipe.ingredients,\n    };\n    console.log(newRecipe);\n\n    //dipatch recipe to update\n    dispatch(updateRecipe(newRecipe));\n    dispatch(saveCurrentRecipe());\n\n    handleClose();\n  }\n\n  return (\n    <Dialog\n      maxWidth={\"sm\"}\n      fullWidth={true}\n      onClose={handleClose}\n      aria-labelledby=\"edit-recipe\"\n      open={open}\n    >\n      <DialogTitle id=\"edit-recipe\">Edit Recipe</DialogTitle>\n\n      <Grid justify=\"center\" container spacing={12}>\n        <Grid container item xs={6} spacing={3}>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <div>\n              <InputLabel id=\"title\">Title of Food</InputLabel>\n              <TextField\n                id=\"title\"\n                placeholder=\"Enter a name\"\n                onChange={handleTitleChange}\n                value={title}\n              />\n              <InputLabel id=\"description\">Description</InputLabel>\n              <TextareaAutosize\n                id=\"description\"\n                rowsMax={4}\n                aria-label=\"description\"\n                placeholder=\"Enter a description\"\n                className=\"instruction-text-area\"\n                onChange={handleDescriptionChange}\n                value={description}\n              />\n            </div>\n          </form>\n        </Grid>\n        <Grid container item xs={6} spacing={3}>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <div>\n              <InputLabel id=\"servings\">Servings</InputLabel>\n              <TextField\n                id=\"servings\"\n                type=\"number\"\n                placeholder=\"Enter the amount of servings\"\n                onChange={handleServingsChange}\n                value={servings}\n              />\n              <InputLabel id=\"prepTime\">Prep Time (in mins)</InputLabel>\n              <TextField\n                id=\"prepTime\"\n                type=\"number\"\n                placeholder=\"Enter the prep time\"\n                onChange={handlePrepTimeChange}\n                value={prepTime}\n              />\n              <InputLabel id=\"cookTime\">Cook Time (in mins)</InputLabel>\n              <TextField\n                id=\"cookTime\"\n                type=\"number\"\n                placeholder=\"Enter the cook time\"\n                onChange={handleCookTimeChange}\n                value={cookTime}\n              />\n            </div>\n          </form>\n        </Grid>\n      </Grid>\n      <Box mb={3} ml={50} pb={3}>\n        <Button\n          onClick={editItem}\n          size=\"medium\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Finished Editing\n        </Button>\n      </Box>\n    </Dialog>\n  );\n}\nexport default EditRecipe;\n","/Users/oladayoogundipe/RecipeBuilder/src/components/AddIngredientModal.js",["115","116"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  TextField,\n  InputLabel,\n  DialogTitle,\n  Dialog,\n  makeStyles,\n} from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { addNewIngredient, saveCurrentRecipe } from \"../actions/recipes\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  form: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n    \"& .instruction-text-area\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n      borderTop: \"none\",\n      borderRight: \"none\",\n      borderLeft: \"none\",\n    },\n    \"& .optionalFormControl\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n\n    paddingBottom: 40,\n    marginLeft: 100,\n    marginTop: 50,\n  },\n}));\n\nfunction AddIngredient(props) {\n  const classes = useStyles();\n  const { onClose, open } = props;\n\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [measurement, setMeasurement] = useState(\"\");\n\n  //close modal\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleAmountChange = (e) => {\n    setAmount(e.target.value);\n  };\n\n  const handleMeasurementChange = (e) => {\n    setMeasurement(e.target.value);\n  };\n\n  const dispatch = useDispatch();\n\n  //add ingredient\n  function addIngredient() {\n    const newIngredient = {\n      uuid: uuidv4(),\n      amount: amount,\n      name: name,\n      measurement: measurement,\n    };\n\n    dispatch(addNewIngredient(newIngredient));\n    dispatch(saveCurrentRecipe());\n    handleClose();\n  }\n\n  return (\n    <Dialog\n      maxWidth={\"xs\"}\n      fullWidth={true}\n      onClose={handleClose}\n      aria-labelledby=\"edit-ingredient\"\n      open={open}\n    >\n      <DialogTitle id=\"edit-ingredient\">Edit Ingredient</DialogTitle>\n\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <div>\n          <InputLabel id=\"name\">Name</InputLabel>\n          <TextField\n            id=\"name\"\n            placeholder=\"Enter the amount of servings\"\n            onChange={handleNameChange}\n          />\n          <InputLabel id=\"measurement\">Measurement</InputLabel>\n          <TextField\n            id=\"measurement\"\n            placeholder=\"Enter the meausrement\"\n            onChange={handleMeasurementChange}\n          />\n          <InputLabel id=\"amount\">Amount</InputLabel>\n          <TextField\n            id=\"amount\"\n            type=\"number\"\n            placeholder=\"Enter the amount\"\n            onChange={handleAmountChange}\n          />\n        </div>\n      </form>\n\n      <Box mb={3} ml={25} pb={3}>\n        <Button\n          onClick={addIngredient}\n          size=\"medium\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add Ingredient\n        </Button>\n      </Box>\n    </Dialog>\n  );\n}\nexport default AddIngredient;\n","/Users/oladayoogundipe/RecipeBuilder/src/components/EditIngredientModal.js",["117","118"],"import React, { useState, useEffect } from \"react\";\n\nimport {\n  Button,\n  TextField,\n  InputLabel,\n  DialogTitle,\n  Dialog,\n  Box,\n  makeStyles,\n} from \"@material-ui/core\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport moment from \"moment\";\n\nimport { updateIngredient, saveCurrentRecipe } from \"../actions/recipes\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 300,\n    width: 100,\n  },\n  form: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n    \"& .instruction-text-area\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n      borderTop: \"none\",\n      borderRight: \"none\",\n      borderLeft: \"none\",\n    },\n    \"& .optionalFormControl\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n\n    paddingBottom: 40,\n    marginLeft: 90,\n    marginTop: 50,\n  },\n}));\n\nfunction EditIngredient(props) {\n  const classes = useStyles();\n  const { onClose, open, currentIngredient } = props;\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState(currentIngredient.name);\n  const [measurement, setMeasurement] = useState(currentIngredient.measurement);\n  const [amount, setAmount] = useState(currentIngredient.amount);\n  console.log(currentIngredient);\n  useEffect(() => {\n    //get recipes for state\n    setName(currentIngredient.name);\n    setMeasurement(currentIngredient.measurement);\n    setAmount(currentIngredient.amount);\n  }, [\n    currentIngredient.name,\n    currentIngredient.measurement,\n    currentIngredient.amount,\n  ]);\n\n  // close modal\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleNameChange = (e) => {\n    setName(e.target.value);\n  };\n  const handleAmountChange = (e) => {\n    setAmount(e.target.value);\n  };\n  const handleMeasurementChange = (e) => {\n    setMeasurement(e.target.value);\n  };\n\n  function editItem() {\n    const date = moment().format(\"L\");\n    const time = moment().format(\"LTS\");\n    const dateAndTime = date + \" \" + time;\n\n    //new ingredient with form data\n\n    const newIngredient = {\n      uuid: currentIngredient.uuid,\n      amount: amount,\n      name: name,\n      measurement: measurement,\n    };\n\n    //update ingredient in redux\n    dispatch(updateIngredient(newIngredient));\n    dispatch(saveCurrentRecipe());\n    handleClose();\n  }\n\n  return (\n    <Dialog\n      maxWidth={\"xs\"}\n      fullWidth={true}\n      onClose={handleClose}\n      aria-labelledby=\"edit-ingredient\"\n      open={open}\n    >\n      <DialogTitle id=\"edit-ingredient\">Edit Ingredient</DialogTitle>\n\n      <form className={classes.form} noValidate autoComplete=\"off\">\n        <div>\n          <InputLabel id=\"name\">Name</InputLabel>\n          <TextField\n            id=\"name\"\n            placeholder=\"Enter the amount of servings\"\n            onChange={handleNameChange}\n            value={name}\n          />\n          <InputLabel id=\"measurement\">Measurement</InputLabel>\n          <TextField\n            id=\"measurement\"\n            placeholder=\"Enter the meausrement\"\n            onChange={handleMeasurementChange}\n            value={measurement}\n          />\n          <InputLabel id=\"amount\">Amount</InputLabel>\n          <TextField\n            id=\"amount\"\n            type=\"number\"\n            placeholder=\"Enter the amount\"\n            onChange={handleAmountChange}\n            value={amount}\n          />\n        </div>\n      </form>\n\n      <Box mb={3} ml={25} pb={3}>\n        <Button\n          onClick={editItem}\n          size=\"medium\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Finished Editing\n        </Button>\n      </Box>\n    </Dialog>\n  );\n}\nexport default EditIngredient;\n","/Users/oladayoogundipe/RecipeBuilder/src/actions/specials.js",["119"],"import axios from \"axios\";\nimport { mockRecipes } from \"./../mockData/recipes\";\nexport const GET_SPECIALS_SUCCESS = \"GET_SPECIALS_SUCCESS\";\n\nexport function getSpecials() {\n  return getSpecialsSuccess(mockRecipes.specials);\n\n  // return function (dispatch) {\n  //   return axios.get(\"http://localhost:3001/specials\").then(({ data }) => {\n  //     dispatch(getSpecialsSuccess(data));\n  //   });\n  // };\n}\n\nfunction getSpecialsSuccess(specials) {\n  return {\n    type: GET_SPECIALS_SUCCESS,\n    specials,\n  };\n}\n","/Users/oladayoogundipe/RecipeBuilder/src/actions/recipes.js",["120","121","122","123"],"/Users/oladayoogundipe/RecipeBuilder/src/mockData/recipes.js",[],"/Users/oladayoogundipe/RecipeBuilder/src/reducers/index.js",[],"/Users/oladayoogundipe/RecipeBuilder/src/reducers/specials.js",[],"/Users/oladayoogundipe/RecipeBuilder/src/reducers/recipes.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":78,"column":6,"nodeType":"130","endLine":78,"endColumn":8,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":25,"column":10,"nodeType":"134","messageId":"135","endLine":25,"endColumn":20},{"ruleId":"132","severity":1,"message":"136","line":28,"column":7,"nodeType":"134","messageId":"135","endLine":28,"endColumn":15},{"ruleId":"132","severity":1,"message":"137","line":91,"column":10,"nodeType":"134","messageId":"135","endLine":91,"endColumn":20},{"ruleId":"132","severity":1,"message":"138","line":91,"column":22,"nodeType":"134","messageId":"135","endLine":91,"endColumn":35},{"ruleId":"132","severity":1,"message":"139","line":92,"column":10,"nodeType":"134","messageId":"135","endLine":92,"endColumn":21},{"ruleId":"132","severity":1,"message":"140","line":92,"column":23,"nodeType":"134","messageId":"135","endLine":92,"endColumn":37},{"ruleId":"128","severity":1,"message":"141","line":102,"column":6,"nodeType":"130","endLine":102,"endColumn":8,"suggestions":"142"},{"ruleId":"132","severity":1,"message":"143","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"128","severity":1,"message":"144","line":60,"column":6,"nodeType":"130","endLine":60,"endColumn":8,"suggestions":"145"},{"ruleId":"132","severity":1,"message":"146","line":1,"column":8,"nodeType":"134","messageId":"135","endLine":1,"endColumn":14},{"ruleId":"132","severity":1,"message":"147","line":22,"column":3,"nodeType":"134","messageId":"135","endLine":22,"endColumn":19},{"ruleId":"132","severity":1,"message":"148","line":23,"column":3,"nodeType":"134","messageId":"135","endLine":23,"endColumn":20},{"ruleId":"128","severity":1,"message":"129","line":64,"column":6,"nodeType":"130","endLine":64,"endColumn":8,"suggestions":"149"},{"ruleId":"132","severity":1,"message":"150","line":16,"column":10,"nodeType":"134","messageId":"135","endLine":16,"endColumn":21},{"ruleId":"128","severity":1,"message":"151","line":64,"column":5,"nodeType":"130","endLine":64,"endColumn":62,"suggestions":"152"},{"ruleId":"132","severity":1,"message":"153","line":87,"column":11,"nodeType":"134","messageId":"135","endLine":87,"endColumn":22},{"ruleId":"132","severity":1,"message":"154","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"150","line":15,"column":10,"nodeType":"134","messageId":"135","endLine":15,"endColumn":21},{"ruleId":"132","severity":1,"message":"154","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"150","line":17,"column":10,"nodeType":"134","messageId":"135","endLine":17,"endColumn":21},{"ruleId":"132","severity":1,"message":"155","line":20,"column":21,"nodeType":"134","messageId":"135","endLine":20,"endColumn":34},{"ruleId":"132","severity":1,"message":"146","line":15,"column":8,"nodeType":"134","messageId":"135","endLine":15,"endColumn":14},{"ruleId":"132","severity":1,"message":"150","line":18,"column":10,"nodeType":"134","messageId":"135","endLine":18,"endColumn":21},{"ruleId":"132","severity":1,"message":"154","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"150","line":11,"column":10,"nodeType":"134","messageId":"135","endLine":11,"endColumn":21},{"ruleId":"132","severity":1,"message":"150","line":13,"column":10,"nodeType":"134","messageId":"135","endLine":13,"endColumn":21},{"ruleId":"132","severity":1,"message":"153","line":88,"column":11,"nodeType":"134","messageId":"135","endLine":88,"endColumn":22},{"ruleId":"132","severity":1,"message":"156","line":1,"column":8,"nodeType":"134","messageId":"135","endLine":1,"endColumn":13},{"ruleId":"132","severity":1,"message":"157","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":32},{"ruleId":"132","severity":1,"message":"156","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":13},{"ruleId":"132","severity":1,"message":"158","line":4,"column":5,"nodeType":"134","messageId":"135","endLine":4,"endColumn":14},{"ruleId":"132","severity":1,"message":"159","line":90,"column":11,"nodeType":"134","messageId":"135","endLine":90,"endColumn":17},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'recipeId'. Either include them or remove the dependency array.","ArrayExpression",["162"],"no-unused-vars","'getRecipes' is defined but never used.","Identifier","unusedVar","'BoldText' is assigned a value but never used.","'directions' is assigned a value but never used.","'setDirections' is assigned a value but never used.","'ingredients' is assigned a value but never used.","'setIngredients' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'recipes'. Either include them or remove the dependency array.",["163"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["164"],"'styled' is defined but never used.","'updateIngredient' is defined but never used.","'saveCurrentRecipe' is defined but never used.",["165"],"'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'currentDirection.instructions'. Either include it or remove the dependency array.",["166"],"'dateAndTime' is assigned a value but never used.","'useEffect' is defined but never used.","'postNewRecipe' is defined but never used.","'axios' is defined but never used.","'ContactSupportOutlined' is defined but never used.","'minimongo' is assigned a value but never used.","'recipe' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"167","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [dispatch, recipeId]",{"range":"176","text":"177"},"Update the dependencies array to be: [dispatch, recipes]",{"range":"178","text":"179"},"Update the dependencies array to be: [dispatch]",{"range":"180","text":"181"},{"range":"182","text":"177"},"Update the dependencies array to be: [currentDirection.instruction, currentDirection.instructions, currentDirection.optional]",{"range":"183","text":"184"},[1676,1678],"[dispatch, recipeId]",[2202,2204],"[dispatch, recipes]",[1126,1128],"[dispatch]",[1411,1413],[1444,1501],"[currentDirection.instruction, currentDirection.instructions, currentDirection.optional]"]